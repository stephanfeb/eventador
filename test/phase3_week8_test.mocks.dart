// Mocks generated by Mockito 5.4.4 from annotations
// in eventador/test/phase3_week8_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:dactor/src/actor.dart' as _i15;
import 'package:dactor/src/actor_ref.dart' as _i7;
import 'package:dactor/src/actor_system.dart' as _i14;
import 'package:dactor/src/event_bus.dart' as _i6;
import 'package:dactor/src/logging/logging.dart' as _i5;
import 'package:dactor/src/message.dart' as _i18;
import 'package:dactor/src/metrics/metrics.dart' as _i3;
import 'package:dactor/src/routing/pool.dart' as _i17;
import 'package:dactor/src/supervision.dart' as _i16;
import 'package:dactor/src/tracing/tracing.dart' as _i4;
import 'package:duraq/src/queue_entry.dart' as _i13;
import 'package:duraq/src/storage/storage_interface.dart' as _i11;
import 'package:eventador/src/event.dart' as _i9;
import 'package:eventador/src/saga/saga_state_envelope.dart' as _i10;
import 'package:eventador/src/storage/event_store.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMetricsCollector_1 extends _i1.SmartFake
    implements _i3.MetricsCollector {
  _FakeMetricsCollector_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTraceCollector_2 extends _i1.SmartFake
    implements _i4.TraceCollector {
  _FakeTraceCollector_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogCollector_3 extends _i1.SmartFake implements _i5.LogCollector {
  _FakeLogCollector_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEventBus_4 extends _i1.SmartFake implements _i6.EventBus {
  _FakeEventBus_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeActorRef_5 extends _i1.SmartFake implements _i7.ActorRef {
  _FakeActorRef_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EventStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventStore extends _i1.Mock implements _i8.EventStore {
  @override
  _i2.Future<void> persistEvent(
    String? persistenceId,
    _i9.Event? event,
    int? expectedVersion,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #persistEvent,
          [
            persistenceId,
            event,
            expectedVersion,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> persistEvents(
    String? persistenceId,
    List<_i9.Event>? events,
    int? expectedVersion,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #persistEvents,
          [
            persistenceId,
            events,
            expectedVersion,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<List<_i9.Event>> getEvents(
    String? persistenceId, {
    int? fromSequence = 0,
    int? toSequence,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEvents,
          [persistenceId],
          {
            #fromSequence: fromSequence,
            #toSequence: toSequence,
          },
        ),
        returnValue: _i2.Future<List<_i9.Event>>.value(<_i9.Event>[]),
        returnValueForMissingStub:
            _i2.Future<List<_i9.Event>>.value(<_i9.Event>[]),
      ) as _i2.Future<List<_i9.Event>>);

  @override
  _i2.Future<int> getHighestSequenceNumber(String? persistenceId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHighestSequenceNumber,
          [persistenceId],
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);

  @override
  _i2.Future<void> saveSnapshot(
    String? persistenceId,
    dynamic state,
    int? sequenceNumber,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSnapshot,
          [
            persistenceId,
            state,
            sequenceNumber,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<_i8.SnapshotData?> loadSnapshot(String? persistenceId) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadSnapshot,
          [persistenceId],
        ),
        returnValue: _i2.Future<_i8.SnapshotData?>.value(),
        returnValueForMissingStub: _i2.Future<_i8.SnapshotData?>.value(),
      ) as _i2.Future<_i8.SnapshotData?>);

  @override
  _i2.Future<void> deleteOldSnapshots(
    String? persistenceId,
    int? keepCount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteOldSnapshots,
          [
            persistenceId,
            keepCount,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> saveSagaState(_i10.SagaStateEnvelope? envelope) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSagaState,
          [envelope],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<_i10.SagaStateEnvelope?> loadSagaState(String? persistenceId) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadSagaState,
          [persistenceId],
        ),
        returnValue: _i2.Future<_i10.SagaStateEnvelope?>.value(),
        returnValueForMissingStub: _i2.Future<_i10.SagaStateEnvelope?>.value(),
      ) as _i2.Future<_i10.SagaStateEnvelope?>);

  @override
  _i2.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [StorageInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageInterface extends _i1.Mock implements _i11.StorageInterface {
  @override
  _i2.Future<void> beginTransaction() => (super.noSuchMethod(
        Invocation.method(
          #beginTransaction,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> commitTransaction() => (super.noSuchMethod(
        Invocation.method(
          #commitTransaction,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> rollbackTransaction() => (super.noSuchMethod(
        Invocation.method(
          #rollbackTransaction,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<T> transaction<T>(_i2.Future<T> Function()? operations) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [operations],
        ),
        returnValue: _i12.ifNotNull(
              _i12.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [operations],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #transaction,
                [operations],
              ),
            ),
        returnValueForMissingStub: _i12.ifNotNull(
              _i12.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [operations],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #transaction,
                [operations],
              ),
            ),
      ) as _i2.Future<T>);

  @override
  _i2.Future<void> store(
    String? queueName,
    _i13.QueueEntry<dynamic>? entry,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #store,
          [
            queueName,
            entry,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<_i13.QueueEntry<dynamic>?> retrieve(String? queueName) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieve,
          [queueName],
        ),
        returnValue: _i2.Future<_i13.QueueEntry<dynamic>?>.value(),
        returnValueForMissingStub:
            _i2.Future<_i13.QueueEntry<dynamic>?>.value(),
      ) as _i2.Future<_i13.QueueEntry<dynamic>?>);

  @override
  _i2.Future<int> count(String? queueName) => (super.noSuchMethod(
        Invocation.method(
          #count,
          [queueName],
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);

  @override
  _i2.Future<List<String>> listQueues() => (super.noSuchMethod(
        Invocation.method(
          #listQueues,
          [],
        ),
        returnValue: _i2.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i2.Future<List<String>>.value(<String>[]),
      ) as _i2.Future<List<String>>);

  @override
  _i2.Future<void> removeQueue(String? queueName) => (super.noSuchMethod(
        Invocation.method(
          #removeQueue,
          [queueName],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> removeEntry(
    String? queueName,
    String? entryId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeEntry,
          [
            queueName,
            entryId,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> updateEntryStatus(
    String? queueName,
    String? entryId,
    _i13.EntryStatus? status, {
    String? errorMessage,
    DateTime? nextRetryAt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEntryStatus,
          [
            queueName,
            entryId,
            status,
          ],
          {
            #errorMessage: errorMessage,
            #nextRetryAt: nextRetryAt,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<_i13.QueueEntry<T>?> retrieveDeadLetter<T>(String? queueName) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieveDeadLetter,
          [queueName],
        ),
        returnValue: _i2.Future<_i13.QueueEntry<T>?>.value(),
        returnValueForMissingStub: _i2.Future<_i13.QueueEntry<T>?>.value(),
      ) as _i2.Future<_i13.QueueEntry<T>?>);

  @override
  _i2.Future<List<_i13.QueueEntry<T>>> listDeadLetters<T>(
    String? queueName, {
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listDeadLetters,
          [queueName],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue:
            _i2.Future<List<_i13.QueueEntry<T>>>.value(<_i13.QueueEntry<T>>[]),
        returnValueForMissingStub:
            _i2.Future<List<_i13.QueueEntry<T>>>.value(<_i13.QueueEntry<T>>[]),
      ) as _i2.Future<List<_i13.QueueEntry<T>>>);

  @override
  _i2.Future<void> retryDeadLetter(
    String? queueName,
    String? entryId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #retryDeadLetter,
          [
            queueName,
            entryId,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> removeDeadLetter(
    String? queueName,
    String? entryId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeDeadLetter,
          [
            queueName,
            entryId,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<int> purgeDeadLetters(
    String? queueName,
    DateTime? cutoff,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #purgeDeadLetters,
          [
            queueName,
            cutoff,
          ],
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);

  @override
  _i2.Future<int> countDeadLetters(String? queueName) => (super.noSuchMethod(
        Invocation.method(
          #countDeadLetters,
          [queueName],
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);

  @override
  _i2.Future<List<_i13.QueueEntry<dynamic>>> retrieveAll(String? queueName) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieveAll,
          [queueName],
        ),
        returnValue: _i2.Future<List<_i13.QueueEntry<dynamic>>>.value(
            <_i13.QueueEntry<dynamic>>[]),
        returnValueForMissingStub:
            _i2.Future<List<_i13.QueueEntry<dynamic>>>.value(
                <_i13.QueueEntry<dynamic>>[]),
      ) as _i2.Future<List<_i13.QueueEntry<dynamic>>>);

  @override
  _i2.Future<void> ping() => (super.noSuchMethod(
        Invocation.method(
          #ping,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [ActorSystem].
///
/// See the documentation for Mockito's code generation for more information.
class MockActorSystem extends _i1.Mock implements _i14.ActorSystem {
  @override
  _i3.MetricsCollector get metrics => (super.noSuchMethod(
        Invocation.getter(#metrics),
        returnValue: _FakeMetricsCollector_1(
          this,
          Invocation.getter(#metrics),
        ),
        returnValueForMissingStub: _FakeMetricsCollector_1(
          this,
          Invocation.getter(#metrics),
        ),
      ) as _i3.MetricsCollector);

  @override
  _i4.TraceCollector get tracer => (super.noSuchMethod(
        Invocation.getter(#tracer),
        returnValue: _FakeTraceCollector_2(
          this,
          Invocation.getter(#tracer),
        ),
        returnValueForMissingStub: _FakeTraceCollector_2(
          this,
          Invocation.getter(#tracer),
        ),
      ) as _i4.TraceCollector);

  @override
  _i5.LogCollector get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogCollector_3(
          this,
          Invocation.getter(#logger),
        ),
        returnValueForMissingStub: _FakeLogCollector_3(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i5.LogCollector);

  @override
  _i6.EventBus get eventBus => (super.noSuchMethod(
        Invocation.getter(#eventBus),
        returnValue: _FakeEventBus_4(
          this,
          Invocation.getter(#eventBus),
        ),
        returnValueForMissingStub: _FakeEventBus_4(
          this,
          Invocation.getter(#eventBus),
        ),
      ) as _i6.EventBus);

  @override
  _i2.Stream<_i6.EventBusEvent> get events => (super.noSuchMethod(
        Invocation.getter(#events),
        returnValue: _i2.Stream<_i6.EventBusEvent>.empty(),
        returnValueForMissingStub: _i2.Stream<_i6.EventBusEvent>.empty(),
      ) as _i2.Stream<_i6.EventBusEvent>);

  @override
  _i2.Future<_i7.ActorRef> spawn<T extends _i15.Actor>(
    String? id,
    T Function()? actorFactory, {
    _i16.SupervisionStrategy? supervision,
    _i17.Pool? pool,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #spawn,
          [
            id,
            actorFactory,
          ],
          {
            #supervision: supervision,
            #pool: pool,
          },
        ),
        returnValue: _i2.Future<_i7.ActorRef>.value(_FakeActorRef_5(
          this,
          Invocation.method(
            #spawn,
            [
              id,
              actorFactory,
            ],
            {
              #supervision: supervision,
              #pool: pool,
            },
          ),
        )),
        returnValueForMissingStub:
            _i2.Future<_i7.ActorRef>.value(_FakeActorRef_5(
          this,
          Invocation.method(
            #spawn,
            [
              id,
              actorFactory,
            ],
            {
              #supervision: supervision,
              #pool: pool,
            },
          ),
        )),
      ) as _i2.Future<_i7.ActorRef>);

  @override
  _i2.Future<void> stop(_i7.ActorRef? actor) => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [actor],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i7.ActorRef? getActor(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getActor,
          [id],
        ),
        returnValueForMissingStub: null,
      ) as _i7.ActorRef?);

  @override
  _i2.Future<void> shutdown() => (super.noSuchMethod(
        Invocation.method(
          #shutdown,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [ActorRef].
///
/// See the documentation for Mockito's code generation for more information.
class MockActorRef extends _i1.Mock implements _i7.ActorRef {
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i12.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  bool get isAlive => (super.noSuchMethod(
        Invocation.getter(#isAlive),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void tell(
    _i18.Message? message, {
    _i7.ActorRef? sender,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #tell,
          [message],
          {#sender: sender},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Future<T> ask<T>(
    _i18.Message? message, [
    Duration? timeout,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #ask,
          [
            message,
            timeout,
          ],
        ),
        returnValue: _i12.ifNotNull(
              _i12.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #ask,
                  [
                    message,
                    timeout,
                  ],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #ask,
                [
                  message,
                  timeout,
                ],
              ),
            ),
        returnValueForMissingStub: _i12.ifNotNull(
              _i12.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #ask,
                  [
                    message,
                    timeout,
                  ],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #ask,
                [
                  message,
                  timeout,
                ],
              ),
            ),
      ) as _i2.Future<T>);

  @override
  void watch(_i7.ActorRef? watcher) => super.noSuchMethod(
        Invocation.method(
          #watch,
          [watcher],
        ),
        returnValueForMissingStub: null,
      );
}
