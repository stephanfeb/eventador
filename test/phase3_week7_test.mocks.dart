// Mocks generated by Mockito 5.4.4 from annotations
// in eventador/test/phase3_week7_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:duraq/src/queue_entry.dart' as _i9;
import 'package:duraq/src/storage/storage_interface.dart' as _i7;
import 'package:eventador/src/command.dart' as _i10;
import 'package:eventador/src/event.dart' as _i5;
import 'package:eventador/src/saga/saga_state.dart' as _i3;
import 'package:eventador/src/saga/saga_state_envelope.dart' as _i6;
import 'package:eventador/src/storage/event_store.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_1 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSagaState_2 extends _i1.SmartFake implements _i3.SagaState {
  _FakeSagaState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EventStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventStore extends _i1.Mock implements _i4.EventStore {
  @override
  _i2.Future<void> persistEvent(
    String? persistenceId,
    _i5.Event? event,
    int? expectedVersion,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #persistEvent,
          [
            persistenceId,
            event,
            expectedVersion,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> persistEvents(
    String? persistenceId,
    List<_i5.Event>? events,
    int? expectedVersion,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #persistEvents,
          [
            persistenceId,
            events,
            expectedVersion,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<List<_i5.Event>> getEvents(
    String? persistenceId, {
    int? fromSequence = 0,
    int? toSequence,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEvents,
          [persistenceId],
          {
            #fromSequence: fromSequence,
            #toSequence: toSequence,
          },
        ),
        returnValue: _i2.Future<List<_i5.Event>>.value(<_i5.Event>[]),
        returnValueForMissingStub:
            _i2.Future<List<_i5.Event>>.value(<_i5.Event>[]),
      ) as _i2.Future<List<_i5.Event>>);

  @override
  _i2.Future<int> getHighestSequenceNumber(String? persistenceId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHighestSequenceNumber,
          [persistenceId],
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);

  @override
  _i2.Future<void> saveSnapshot(
    String? persistenceId,
    dynamic state,
    int? sequenceNumber,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSnapshot,
          [
            persistenceId,
            state,
            sequenceNumber,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<_i4.SnapshotData?> loadSnapshot(String? persistenceId) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadSnapshot,
          [persistenceId],
        ),
        returnValue: _i2.Future<_i4.SnapshotData?>.value(),
        returnValueForMissingStub: _i2.Future<_i4.SnapshotData?>.value(),
      ) as _i2.Future<_i4.SnapshotData?>);

  @override
  _i2.Future<void> deleteOldSnapshots(
    String? persistenceId,
    int? keepCount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteOldSnapshots,
          [
            persistenceId,
            keepCount,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> saveSagaState(_i6.SagaStateEnvelope? envelope) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSagaState,
          [envelope],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<_i6.SagaStateEnvelope?> loadSagaState(String? persistenceId) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadSagaState,
          [persistenceId],
        ),
        returnValue: _i2.Future<_i6.SagaStateEnvelope?>.value(),
        returnValueForMissingStub: _i2.Future<_i6.SagaStateEnvelope?>.value(),
      ) as _i2.Future<_i6.SagaStateEnvelope?>);

  @override
  _i2.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [StorageInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageInterface extends _i1.Mock implements _i7.StorageInterface {
  @override
  _i2.Future<void> beginTransaction() => (super.noSuchMethod(
        Invocation.method(
          #beginTransaction,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> commitTransaction() => (super.noSuchMethod(
        Invocation.method(
          #commitTransaction,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> rollbackTransaction() => (super.noSuchMethod(
        Invocation.method(
          #rollbackTransaction,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<T> transaction<T>(_i2.Future<T> Function()? operations) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [operations],
        ),
        returnValue: _i8.ifNotNull(
              _i8.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [operations],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #transaction,
                [operations],
              ),
            ),
        returnValueForMissingStub: _i8.ifNotNull(
              _i8.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [operations],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #transaction,
                [operations],
              ),
            ),
      ) as _i2.Future<T>);

  @override
  _i2.Future<void> store(
    String? queueName,
    _i9.QueueEntry<dynamic>? entry,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #store,
          [
            queueName,
            entry,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<_i9.QueueEntry<dynamic>?> retrieve(String? queueName) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieve,
          [queueName],
        ),
        returnValue: _i2.Future<_i9.QueueEntry<dynamic>?>.value(),
        returnValueForMissingStub: _i2.Future<_i9.QueueEntry<dynamic>?>.value(),
      ) as _i2.Future<_i9.QueueEntry<dynamic>?>);

  @override
  _i2.Future<int> count(String? queueName) => (super.noSuchMethod(
        Invocation.method(
          #count,
          [queueName],
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);

  @override
  _i2.Future<List<String>> listQueues() => (super.noSuchMethod(
        Invocation.method(
          #listQueues,
          [],
        ),
        returnValue: _i2.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i2.Future<List<String>>.value(<String>[]),
      ) as _i2.Future<List<String>>);

  @override
  _i2.Future<void> removeQueue(String? queueName) => (super.noSuchMethod(
        Invocation.method(
          #removeQueue,
          [queueName],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> removeEntry(
    String? queueName,
    String? entryId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeEntry,
          [
            queueName,
            entryId,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> updateEntryStatus(
    String? queueName,
    String? entryId,
    _i9.EntryStatus? status, {
    String? errorMessage,
    DateTime? nextRetryAt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEntryStatus,
          [
            queueName,
            entryId,
            status,
          ],
          {
            #errorMessage: errorMessage,
            #nextRetryAt: nextRetryAt,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<_i9.QueueEntry<T>?> retrieveDeadLetter<T>(String? queueName) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieveDeadLetter,
          [queueName],
        ),
        returnValue: _i2.Future<_i9.QueueEntry<T>?>.value(),
        returnValueForMissingStub: _i2.Future<_i9.QueueEntry<T>?>.value(),
      ) as _i2.Future<_i9.QueueEntry<T>?>);

  @override
  _i2.Future<List<_i9.QueueEntry<T>>> listDeadLetters<T>(
    String? queueName, {
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listDeadLetters,
          [queueName],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue:
            _i2.Future<List<_i9.QueueEntry<T>>>.value(<_i9.QueueEntry<T>>[]),
        returnValueForMissingStub:
            _i2.Future<List<_i9.QueueEntry<T>>>.value(<_i9.QueueEntry<T>>[]),
      ) as _i2.Future<List<_i9.QueueEntry<T>>>);

  @override
  _i2.Future<void> retryDeadLetter(
    String? queueName,
    String? entryId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #retryDeadLetter,
          [
            queueName,
            entryId,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> removeDeadLetter(
    String? queueName,
    String? entryId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeDeadLetter,
          [
            queueName,
            entryId,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<int> purgeDeadLetters(
    String? queueName,
    DateTime? cutoff,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #purgeDeadLetters,
          [
            queueName,
            cutoff,
          ],
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);

  @override
  _i2.Future<int> countDeadLetters(String? queueName) => (super.noSuchMethod(
        Invocation.method(
          #countDeadLetters,
          [queueName],
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);

  @override
  _i2.Future<List<_i9.QueueEntry<dynamic>>> retrieveAll(String? queueName) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieveAll,
          [queueName],
        ),
        returnValue: _i2.Future<List<_i9.QueueEntry<dynamic>>>.value(
            <_i9.QueueEntry<dynamic>>[]),
        returnValueForMissingStub:
            _i2.Future<List<_i9.QueueEntry<dynamic>>>.value(
                <_i9.QueueEntry<dynamic>>[]),
      ) as _i2.Future<List<_i9.QueueEntry<dynamic>>>);

  @override
  _i2.Future<void> ping() => (super.noSuchMethod(
        Invocation.method(
          #ping,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [Command].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommand extends _i1.Mock implements _i10.Command {
  @override
  String get commandId => (super.noSuchMethod(
        Invocation.getter(#commandId),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#commandId),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#commandId),
        ),
      ) as String);

  @override
  String get correlationId => (super.noSuchMethod(
        Invocation.getter(#correlationId),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#correlationId),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#correlationId),
        ),
      ) as String);

  @override
  DateTime get timestamp => (super.noSuchMethod(
        Invocation.getter(#timestamp),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.getter(#timestamp),
        ),
        returnValueForMissingStub: _FakeDateTime_1(
          this,
          Invocation.getter(#timestamp),
        ),
      ) as DateTime);

  @override
  Map<String, dynamic> get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  List<int> toCbor() => (super.noSuchMethod(
        Invocation.method(
          #toCbor,
          [],
        ),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);

  @override
  bool isValid() => (super.noSuchMethod(
        Invocation.method(
          #isValid,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<String> getValidationErrors() => (super.noSuchMethod(
        Invocation.method(
          #getValidationErrors,
          [],
        ),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
}

/// A class which mocks [Event].
///
/// See the documentation for Mockito's code generation for more information.
class MockEvent extends _i1.Mock implements _i5.Event {
  @override
  String get eventId => (super.noSuchMethod(
        Invocation.getter(#eventId),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#eventId),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#eventId),
        ),
      ) as String);

  @override
  String get correlationId => (super.noSuchMethod(
        Invocation.getter(#correlationId),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#correlationId),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#correlationId),
        ),
      ) as String);

  @override
  DateTime get timestamp => (super.noSuchMethod(
        Invocation.getter(#timestamp),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.getter(#timestamp),
        ),
        returnValueForMissingStub: _FakeDateTime_1(
          this,
          Invocation.getter(#timestamp),
        ),
      ) as DateTime);

  @override
  int get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  Map<String, dynamic> get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  List<int> toCbor() => (super.noSuchMethod(
        Invocation.method(
          #toCbor,
          [],
        ),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);

  @override
  bool isValid() => (super.noSuchMethod(
        Invocation.method(
          #isValid,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<String> getValidationErrors() => (super.noSuchMethod(
        Invocation.method(
          #getValidationErrors,
          [],
        ),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
}

/// A class which mocks [SagaState].
///
/// See the documentation for Mockito's code generation for more information.
class MockSagaState extends _i1.Mock implements _i3.SagaState {
  @override
  _i3.SagaStatus get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i3.SagaStatus.running,
        returnValueForMissingStub: _i3.SagaStatus.running,
      ) as _i3.SagaStatus);

  @override
  DateTime get lastUpdated => (super.noSuchMethod(
        Invocation.getter(#lastUpdated),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.getter(#lastUpdated),
        ),
        returnValueForMissingStub: _FakeDateTime_1(
          this,
          Invocation.getter(#lastUpdated),
        ),
      ) as DateTime);

  @override
  _i3.SagaState copyWith({
    _i3.SagaStatus? status,
    DateTime? lastUpdated,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #status: status,
            #lastUpdated: lastUpdated,
          },
        ),
        returnValue: _FakeSagaState_2(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #status: status,
              #lastUpdated: lastUpdated,
            },
          ),
        ),
        returnValueForMissingStub: _FakeSagaState_2(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #status: status,
              #lastUpdated: lastUpdated,
            },
          ),
        ),
      ) as _i3.SagaState);
}
